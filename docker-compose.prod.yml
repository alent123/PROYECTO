version: '3.8'

services:
  # Servidor web con PHP-FPM optimizado
  app:
    build:
      context: ./retrolector
      dockerfile: Dockerfile.prod
    container_name: retrolector_app_prod
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./retrolector/storage:/var/www/storage
      - ./retrolector/bootstrap/cache:/var/www/bootstrap/cache
      - ./uploads:/var/www/storage/app/public/uploads
    networks:
      - retrolector_network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Servidor web Nginx optimizado
  nginx:
    image: nginx:alpine
    container_name: retrolector_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./retrolector:/var/www
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - retrolector_network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Base de datos MySQL optimizada
  db:
    image: mysql:8.0
    container_name: retrolector_db_prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: retrolector
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data_prod:/var/lib/mysql
      - ./docker/mysql/prod.cnf:/etc/mysql/my.cnf
      - ./backups:/backups
    networks:
      - retrolector_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis para caché y sesiones
  redis:
    image: redis:alpine
    container_name: retrolector_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - retrolector_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Elasticsearch para búsquedas
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: retrolector_elasticsearch_prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    networks:
      - retrolector_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Supervisor para gestión de procesos
  supervisor:
    build:
      context: ./retrolector
      dockerfile: Dockerfile.supervisor
    container_name: retrolector_supervisor_prod
    restart: unless-stopped
    volumes:
      - ./retrolector:/var/www
      - ./logs/supervisor:/var/log/supervisor
    networks:
      - retrolector_network
    depends_on:
      - app
      - db
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup automático
  backup:
    image: mysql:8.0
    container_name: retrolector_backup_prod
    restart: "no"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh
    networks:
      - retrolector_network
    depends_on:
      - db
    command: /backup.sh
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitor de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: retrolector_logstash_prod
    restart: unless-stopped
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/var/log/retrolector
    networks:
      - retrolector_network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  db_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  elasticsearch_data_prod:
    driver: local

networks:
  retrolector_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: retrolector_net 